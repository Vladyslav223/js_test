{"version":3,"sources":["Components/Modal/Modal.js","Components/Questions/CheckBoxQuestion/CheckBoxQuestion.js","Components/Questions/NumberQuestion/NumberQuestion.js","Components/Questions/RadioQuestion/RadioQuestion.js","Components/Questions/SelectQuestion/SelectQuestion.js","Components/Questions/TextQuestion/TextQuestion.js","Components/QuestionList/QuestionList.js","Components/HomePage/HomePage.js","App.js","index.js"],"names":["Modal","handleCancelClick","handleSubmitClick","className","type","onClick","CheckBoxQuestion","state","id","validate","answer","value","key","index","this","setState","prevState","inputedValue","val","some","input","props","handleChange","body","disabled","currentAnswer","answers","find","item","variants","map","variant","count","checked","curentAnswerRight","right","onChange","event","handleCheckStateAndProps","target","htmlFor","Component","defaultProps","NumberQuestion","RadioQuestion","curentAnswer","answr","handleRadioState","name","SelectQuestion","hidden","TextQuestion","status","questionTypes","text","checkbox","radio","select","number","QuestionList","questions","question","isRight","Question","isRightClass","hasOwnProperty","PropTypes","arrayOf","shape","API_URL","HomePage","showModal","results","isLoading","redirectToResults","redirectToHome","componentDidMount","a","data","JSON","parse","localStorage","getItem","length","fetch","response","json","runAnswersCheck","handleHome","handleSubmit","preventDefault","every","object","setItem","stringify","answerRight","to","exact","path","render","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ef954d5d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\nconst Modal = ({ handleCancelClick, handleSubmitClick }) => (\n  <div className=\"overlay\">\n    <div className=\"modal\">\n      <div className=\"modal__header\">\n        <p className=\"modal__header-title\">Внимание!</p>\n\n      </div>\n      <p className=\"modal__body\">\n            Каждый неотвеченный ответ считается неправильным\n      </p>\n      <div className=\"modal__footer\">\n        <button type=\"button\" onClick={handleSubmitClick}>Продолжить</button>\n        <button type=\"button\" onClick={handleCancelClick}>Отмена</button>\n\n      </div>\n    </div>\n\n  </div>\n);\n\nModal.propTypes = {\n  handleSubmitClick: PropTypes.func.isRequired,\n  handleCancelClick: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport answers from '../../../api/answers.json';\nimport './CheckBoxQuestion.scss';\n\nclass CheckBoxQuestion extends Component {\n  state = {\n    id: '',\n    validate: false,\n    answer: [false, false, false, false],\n  }\n\n  handleCheckStateAndProps(value, key, index) {\n    this.setState((prevState) => {\n      const inputedValue = prevState.answer;\n\n      inputedValue[index] = value;\n\n      const val = inputedValue.some(input => input);\n\n      return {\n        id: key,\n        validate: val,\n        answer: inputedValue,\n      };\n    }, () => this.props.handleChange(this.state));\n  }\n\n  render() {\n    const {\n      body,\n      id,\n      disabled,\n      answer,\n    } = this.props;\n    const currentAnswer = answers.find(item => item.id === id);\n    let index = 0;\n\n    return (\n      <div>\n        <span className=\"question__id\"><p>{id}</p></span>\n        <p className=\"question__body\">{body}</p>\n        {currentAnswer.variants.map((variant, count) => {\n          let checked = null;\n          let curentAnswerRight = null;\n\n          if (answer) {\n            checked = answer[count];\n          }\n\n          if (disabled) {\n            checked = answer && answer[count];\n            curentAnswerRight = currentAnswer.right[count];\n          }\n\n          return (\n            <div\n              className={\n                curentAnswerRight\n                  ? 'checkbox right-variants'\n                  : 'checkbox'\n              }\n              key={variant}\n            >\n              <input\n                checked={checked}\n                disabled={disabled}\n                id={`checkboxVariant${++index}`}\n                onChange={event => this\n                  .handleCheckStateAndProps(event.target.checked, id, count)}\n                type=\"checkbox\"\n              />\n              <label htmlFor={`checkboxVariant${index}`}>\n                {variant}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nCheckBoxQuestion.propTypes = {\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  answer: PropTypes.arrayOf(\n    PropTypes.bool\n  ),\n  handleChange: PropTypes.func.isRequired,\n};\n\nCheckBoxQuestion.defaultProps = {\n  disabled: null,\n  answer: null,\n};\nexport default CheckBoxQuestion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './NumberQuestion.scss';\n\nconst NumberQuestion = (props) => {\n  const { id, body, disabled, answer } = props;\n  const validate = true;\n\n  return (\n    <div>\n      <span className=\"question__id\"><p>{id}</p></span>\n      <label htmlFor={props.id}>\n        <p className=\"question__body\">{body}</p>\n        <input\n          disabled={disabled}\n          onChange={event => props.handleChange({\n            id: props.id,\n            validate,\n            answer: event.target.value,\n          })}\n          value={answer}\n          type=\"number\"\n        />\n      </label>\n    </div>\n  );\n};\n\nNumberQuestion.propTypes = {\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  handleChange: PropTypes.func,\n  answer: PropTypes.string,\n};\n\nNumberQuestion.defaultProps = {\n  disabled: null,\n  answer: '',\n  handleChange: () => {},\n};\n\nexport default NumberQuestion;\n","\nimport React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport answers from '../../../api/answers.json';\nimport './RadioQuestion.scss';\n\nclass RadioQuestion extends Component {\n  state = {\n    id: '',\n    validate: false,\n    answer: [],\n  }\n\n  handleRadioState(value, key, index) {\n    const inputedValue = [false, false, false, false];\n\n    inputedValue[index] = value;\n\n    const validate = inputedValue.some(input => input);\n\n    this.setState({\n      id: key,\n      validate,\n      answer: inputedValue,\n    }, () => this.props.handleChange(this.state));\n  }\n\n  render() {\n    const { body, id, disabled, answer } = this.props;\n    const curentAnswer = answers.find(answr => answr.id === id);\n\n    let index = 0;\n\n    return (\n      <div>\n        <span className=\"question__id\"><p>{id}</p></span>\n        <p className=\"question__body\">{body}</p>\n\n        {curentAnswer.variants.map((variant, count) => {\n          let checked = null;\n          let curentAnswerRight = null;\n\n          if (answer) {\n            checked = answer[count];\n          }\n\n          if (disabled) {\n            checked = answer && answer[count];\n            curentAnswerRight = curentAnswer.right[count];\n          }\n\n          return (\n            <div\n              key={variant}\n              className={curentAnswerRight\n                ? 'radio-button right-variants'\n                : 'radio-button'\n              }\n            >\n\n              <input\n                checked={checked}\n                disabled={disabled}\n                onChange={event => this.handleRadioState(\n                  event.target.checked,\n                  id,\n                  count\n                )}\n                type=\"radio\"\n                id={`radio-variant${++index}`}\n                name=\"radio\"\n              />\n              <label\n                className=\"radio-label\"\n                htmlFor={`radio-variant${index}`}\n              >\n                {variant}\n              </label>\n\n            </div>\n          );\n        })}\n\n      </div>\n    );\n  }\n}\n\nRadioQuestion.propTypes = {\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  answer: PropTypes.arrayOf(\n    PropTypes.bool\n  ),\n  handleChange: PropTypes.func.isRequired,\n};\n\nRadioQuestion.defaultProps = {\n  disabled: null,\n  answer: '',\n};\n\nexport default RadioQuestion;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport answers from '../../../api/answers.json';\nimport './SelectQuestion.scss';\n\nconst SelectQuestion = (props) => {\n  const { body, id, value, handleChange, disabled, answer } = props;\n  const curentAnswer = answers.find(answr => answr.id === id);\n  const validate = value !== 0;\n\n  return (\n    <div className=\"question select\">\n      <span className=\"question__id\"><p>{id}</p></span>\n      <p className=\"question__body\">{body}</p>\n      <br />\n      <select\n        disabled={disabled}\n        onChange={event => handleChange({\n          id: props.id,\n          validate,\n          answer: event.target.value,\n        })}\n        value={answer}\n      >\n        <option value=\"0\" hidden>Select answer</option>\n        {curentAnswer.variants.map(variant => (\n          <option\n            key={variant}\n            value={variant}\n          >\n            {variant}\n          </option>\n        ))}\n      </select>\n      <div className=\"select__arrow\" />\n    </div>\n  );\n};\n\nSelectQuestion.propTypes = {\n  id: PropTypes.number.isRequired,\n  body: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  answer: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n};\n\nSelectQuestion.defaultProps = {\n  disabled: null,\n  value: '',\n  answer: '',\n};\n\nexport default SelectQuestion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TextQuestion = (props) => {\n  const {\n    id,\n    body,\n    value,\n    handleChange,\n    disabled,\n    status,\n    answer,\n  } = props;\n\n  return (\n    <div>\n      <span className=\"question__id\"><p>{id}</p></span>\n      <p className=\"question__body\">{body}</p>\n      <label htmlFor={`id-${id}`} />\n      <input\n        id={`id-${id}`}\n        className={status ? 'right-answer' : 'wrong-answer'}\n        disabled={disabled}\n        onChange={event => handleChange({\n          id,\n          validate: !!value,\n          answer: event.target.value,\n        })}\n        value={answer}\n        type=\"text\"\n      />\n    </div>\n  );\n};\n\nTextQuestion.propTypes = {\n  id: PropTypes.number.isRequired,\n  status: PropTypes.bool,\n  body: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  answer: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n};\n\nTextQuestion.defaultProps = {\n  disabled: null,\n  value: '',\n  status: null,\n  answer: '',\n};\n\nexport default TextQuestion;\n","/* eslint-disable no-prototype-builtins */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './QuestionList.scss';\n\nimport CheckBoxQuestion from '../Questions/CheckBoxQuestion/CheckBoxQuestion';\nimport NumberQuestion from '../Questions/NumberQuestion/NumberQuestion';\nimport RadioQuestion from '../Questions/RadioQuestion/RadioQuestion';\nimport SelectQuestion from '../Questions/SelectQuestion/SelectQuestion';\nimport TextQuestion from '../Questions/TextQuestion/TextQuestion';\n\nexport const questionTypes = {\n  text: TextQuestion,\n  checkbox: CheckBoxQuestion,\n  radio: RadioQuestion,\n  select: SelectQuestion,\n  number: NumberQuestion,\n};\n\nconst QuestionList = (props) => {\n  const { disabled, questions, answers, handleChange } = props;\n\n  return (\n    <form>\n      {questions.map((question) => {\n        const { type, body, id, answer, isRight } = question;\n        const Question = questionTypes[type];\n        let isRightClass = '';\n\n        if (question.hasOwnProperty('isRight')) {\n          isRightClass = isRight ? 'right' : 'wrong';\n        }\n\n        return (\n          <div\n            key={`${type} ${id}`}\n            className={`${isRightClass} question`}\n          >\n            <Question\n              answers={answers}\n              answer={answer}\n              status={isRight}\n              value={answer}\n              disabled={disabled}\n              handleChange={handleChange}\n              body={body}\n              id={id}\n            />\n          </div>\n        );\n      })}\n    </form>\n  );\n};\n\nQuestionList.propTypes = {\n  disabled: PropTypes.bool,\n  handleChange: PropTypes.func,\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n      value: PropTypes.string,\n    })\n  ),\n  answers: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired })\n  ),\n};\n\nQuestionList.defaultProps = {\n  disabled: null,\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({ value: null })\n  ),\n  handleChange: () => {},\n  answers: null,\n};\n\nexport default QuestionList;\n","import React, { Component } from 'react';\n\nimport {\n  HashRouter,\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\n\nimport Modal from '../Modal/Modal';\nimport QuestionList from '../QuestionList/QuestionList';\nimport answers from '../../api/answers.json';\nimport './HomePage.scss';\n\n// eslint-disable-next-line\nconst API_URL = 'https://gist.githubusercontent.com/Vladyslav223/d438456f5d51277a7dd7d9a3eec65f62/raw/68db8e84ec11de515090c8201b3f8cdb4fe27316/questions.json';\n\nclass HomePage extends Component {\n  state = {\n    questions: [],\n    showModal: false,\n    count: 0,\n    results: null,\n    isLoading: true,\n    redirectToResults: false,\n    redirectToHome: false,\n  }\n\n  componentDidMount = async() => {\n    const data = JSON.parse(localStorage.getItem('data'));\n\n    if (data && data.length) {\n      this.setState({\n        questions: data,\n        isLoading: false,\n      });\n    } else {\n      const response = await fetch(API_URL);\n      const questions = await response.json();\n\n      this.setState({\n        questions,\n        isLoading: false,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    const { questions } = this.state;\n\n    localStorage.setItem('data', JSON.stringify(questions));\n  }\n\n  handleCancelClick = () => this.setState({ showModal: false });\n\n  handleSubmitClick = () => this.runAnswersCheck();\n\n  handleHome = () => this.setState({ redirectToHome: true });\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { questions } = this.state;\n    const validate = questions.every(question => question.validate);\n\n    if (validate) {\n      this.runAnswersCheck();\n    } else {\n      this.setState(\n        { showModal: true }\n      );\n    }\n  }\n\n  handleChange = (object) => {\n    const { id, answer, validate } = object;\n\n    this.setState((prevState) => {\n      const { questions } = prevState;\n\n      return {\n        ...prevState,\n        questions: questions.map(question => (question.id !== id\n          ? question\n          : {\n            ...question,\n            answer,\n            validate,\n            id,\n          })),\n      };\n    });\n  }\n\n  runAnswersCheck() {\n    const { questions } = this.state;\n    let count = 0;\n    const results = questions.map((question) => {\n      const answerRight = answers.find(answer => answer.id === question.id);\n      const { answer } = question;\n      let isRight = false;\n\n      if (typeof answer === 'object') {\n        isRight = JSON.stringify(answer) === JSON.stringify(answerRight.right);\n\n        if (isRight) {\n          count += 1;\n        }\n      } else {\n        isRight = answer === answerRight.right;\n\n        if (isRight) {\n          count += 1;\n        }\n      }\n\n      return {\n        ...question,\n        isRight,\n      };\n    });\n\n    this.setState({\n      count,\n      results,\n      redirectToResults: true,\n    });\n  }\n\n  render() {\n    const {\n      questions,\n      isLoading,\n      results,\n      showModal,\n      redirectToResults,\n      redirectToHome,\n      count,\n    } = this.state;\n\n    if (redirectToResults) {\n      this.setState(\n        { redirectToResults: false }\n      );\n\n      return (\n        <HashRouter>\n          <Redirect to=\"/results\" />\n        </HashRouter>\n      );\n    }\n\n    if (redirectToHome) {\n      this.setState({\n        redirectToHome: false,\n        showModal: false,\n      });\n\n      return (\n        <HashRouter>\n          <Redirect to=\"/\" />\n        </HashRouter>\n      );\n    }\n\n    return (\n      <HashRouter>\n        {isLoading\n          ? (<div className=\"loading\">loading...</div>)\n          : (\n            <div className=\"question-list\">\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => (\n                    <>\n                      <h1>JavaScript test</h1>\n                      <QuestionList\n                        questions={questions}\n                        handleChange={this.handleChange}\n                      />\n                      <button\n                        type=\"submit\"\n                        onClick={this.handleSubmit}\n                      >\n                        Ответить\n                      </button>\n                      {showModal\n                        && (\n                          <Modal\n                            handleSubmitClick={this.handleSubmitClick}\n                            handleCancelClick={this.handleCancelClick}\n                          />\n                        )}\n                    </>\n                  )}\n                />\n                <Route\n                  path=\"/results\"\n                  render={() => (\n                    <>\n                      <h1>Результаты</h1>\n                      <p>\n                        {`Правильных овтетов: ${count} из ${questions.length}`}\n                      </p>\n                      {results\n                        && (\n                          <QuestionList\n                            answers={answers}\n                            disabled\n                            questions={results}\n                          />\n                        )\n                      }\n                      <button\n                        type=\"button\"\n                        onClick={this.handleHome}\n                      >\n                        На главную\n                      </button>\n                    </>\n                  )}\n                />\n              </Switch>\n            </div>\n          )}\n      </HashRouter>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport './App.css';\n\nimport HomePage from './Components/HomePage/HomePage';\n\nconst App = () => <HomePage />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}